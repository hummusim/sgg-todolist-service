// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/overridesh/sgg-todolist-service/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: _a0, _a1
func (_m *TaskRepository) CreateTask(_a0 context.Context, _a1 model.Task) (*model.Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Task
	if rf, ok := ret.Get(0).(func(context.Context, model.Task) *model.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Task) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: _a0, _a1
func (_m *TaskRepository) DeleteTask(_a0 context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTask provides a mock function with given fields: _a0, _a1
func (_m *TaskRepository) GetTask(_a0 context.Context, _a1 uuid.UUID) (*model.Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Task
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields: _a0, _a1
func (_m *TaskRepository) GetTasks(_a0 context.Context, _a1 int32) ([]*model.Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*model.Task
	if rf, ok := ret.Get(0).(func(context.Context, int32) []*model.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: _a0, _a1
func (_m *TaskRepository) UpdateTask(_a0 context.Context, _a1 *model.Task) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Task) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
