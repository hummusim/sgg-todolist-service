// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/overridesh/sgg-todolist-service/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// LabelRepository is an autogenerated mock type for the LabelRepository type
type LabelRepository struct {
	mock.Mock
}

// CreateLabel provides a mock function with given fields: _a0, _a1
func (_m *LabelRepository) CreateLabel(_a0 context.Context, _a1 model.Label) (*model.Label, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Label
	if rf, ok := ret.Get(0).(func(context.Context, model.Label) *model.Label); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Label) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLabelByTaskIdAndLabelId provides a mock function with given fields: ctx, taskId, labelId
func (_m *LabelRepository) DeleteLabelByTaskIdAndLabelId(ctx context.Context, taskId uuid.UUID, labelId uuid.UUID) error {
	ret := _m.Called(ctx, taskId, labelId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, taskId, labelId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLabelsByTaskId provides a mock function with given fields: _a0, _a1
func (_m *LabelRepository) GetLabelsByTaskId(_a0 context.Context, _a1 uuid.UUID) ([]*model.Label, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*model.Label
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.Label); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
